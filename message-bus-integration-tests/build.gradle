sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

compileIntegrationTestJava {
    options.encoding = "UTF-8"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    integrationTestImplementation project(':message-bus-model')
    integrationTestImplementation project(':message-consumer')
    integrationTestImplementation project(':message-producer')

    integrationTestImplementation libs.guava
    integrationTestImplementation libs.kafka
    integrationTestImplementation libs.protobuf
    integrationTestImplementation libs.protobuf_util
    integrationTestImplementation libs.slf4j_simple
    integrationTestImplementation libs.test
}

def integrationTestConfig = {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: " +
                        "${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}

task iTest(type: Test) {
    useJUnitPlatform()

    configure integrationTestConfig
}
