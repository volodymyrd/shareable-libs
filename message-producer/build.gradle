sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

compileIntegrationTestJava {
    options.encoding = "UTF-8"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath libs.protobuf_gradle
    }
}

apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

protobuf {
    generatedFilesBaseDir = "$projectDir/src/main/generated"
    protoc {
        artifact = libs.protoc
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

dependencies {
    implementation project(':message-bus-model')

    implementation libs.guava
    implementation libs.kafka
    implementation libs.protobuf
    implementation libs.protobuf_util
    implementation libs.slf4j

    testImplementation libs.test

    integrationTestImplementation project(':message-bus-model')

    integrationTestImplementation libs.guava
    integrationTestImplementation libs.kafka
    integrationTestImplementation libs.protobuf
    integrationTestImplementation libs.protobuf_util
    integrationTestImplementation libs.test
}

jar {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    ext.revision = proc.text.trim()

    manifest {
        attributes(
                "Implementation-Version": version + " build: " + ext.revision,
                "releases-date": new Date().format("yyyy-MM-dd'T 'HH:mm:ss.SSSZZ"),
                "Specification-Vendor": "Volmyr.com",
                "Specification-Title": "Message Bus Producer"
        )
    }

    baseName 'message-producer'
}

def integrationTestConfig = {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: " +
                        "${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}

task iTest(type: Test) {
    useJUnitPlatform()

    configure integrationTestConfig
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.volmyr.shareable'
            artifactId = 'message-producer'
            version = version
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Message Bus Producer'
                description = 'Provide Message Bus Producer'
                developers {
                    developer {
                        id = 'volodymyrd'
                        name = 'Volodymyr Dotsenko'
                        email = 'volodymyrdotsenko@volmyr.com'
                    }
                }
            }
        }
    }
}
